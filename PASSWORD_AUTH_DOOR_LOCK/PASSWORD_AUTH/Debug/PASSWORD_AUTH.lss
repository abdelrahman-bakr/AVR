
PASSWORD_AUTH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  0000078a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001646  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a2f  00000000  00000000  00002052  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d13  00000000  00000000  00002a81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002ec  00000000  00000000  00003794  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bb  00000000  00000000  00003a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000daf  00000000  00000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00004dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e8       	ldi	r30, 0x8A	; 138
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3b       	cpi	r26, 0xB8	; 184
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 03 	call	0x656	; 0x656 <main>
  8a:	0c 94 c3 03 	jmp	0x786	; 0x786 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Init>:



void I2C_Init()			/* I2C initialize function */
{
	TWBR = BITRATE(TWSR=0x00);	/* Get bit rate register value by formula */
  92:	11 b8       	out	0x01, r1	; 1
  94:	10 b8       	out	0x00, r1	; 0
  96:	08 95       	ret

00000098 <I2C_Start>:
}
uint8_t I2C_Start(char write_address)/* I2C start function */
{
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
  98:	94 ea       	ldi	r25, 0xA4	; 164
  9a:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  9c:	06 b6       	in	r0, 0x36	; 54
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <I2C_Start+0x4>
	status=TWSR&0xF8;		/* Read TWI status register */
  a2:	91 b1       	in	r25, 0x01	; 1
	if(status!=0x08)		/* Check weather START transmitted or not? */
  a4:	98 7f       	andi	r25, 0xF8	; 248
  a6:	98 30       	cpi	r25, 0x08	; 8
  a8:	71 f4       	brne	.+28     	; 0xc6 <I2C_Start+0x2e>
	return 0;			/* Return 0 to indicate start condition fail */
	TWDR=write_address;		/* Write SLA+W in TWI data register */
  aa:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  b0:	06 b6       	in	r0, 0x36	; 54
  b2:	07 fe       	sbrs	r0, 7
  b4:	fd cf       	rjmp	.-6      	; 0xb0 <I2C_Start+0x18>
	status=TWSR&0xF8;		/* Read TWI status register */
  b6:	81 b1       	in	r24, 0x01	; 1
  b8:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
  ba:	88 31       	cpi	r24, 0x18	; 24
  bc:	31 f0       	breq	.+12     	; 0xca <I2C_Start+0x32>
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
  be:	80 32       	cpi	r24, 0x20	; 32
  c0:	31 f0       	breq	.+12     	; 0xce <I2C_Start+0x36>
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	08 95       	ret
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate START */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status!=0x08)		/* Check weather START transmitted or not? */
	return 0;			/* Return 0 to indicate start condition fail */
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret
	TWDR=write_address;		/* Write SLA+W in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x18)		/* Check for SLA+W transmitted &ack received */
	return 1;			/* Return 1 to indicate ack received */
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	08 95       	ret
	if(status==0x20)		/* Check for SLA+W transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
  ce:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
}
  d0:	08 95       	ret

000000d2 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address) /* I2C repeated start function */
{
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
  d2:	94 ea       	ldi	r25, 0xA4	; 164
  d4:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <I2C_Repeated_Start+0x4>
	status=TWSR&0xF8;		/* Read TWI status register */
  dc:	91 b1       	in	r25, 0x01	; 1
	if(status!=0x10)		/* Check for repeated start transmitted */
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	90 31       	cpi	r25, 0x10	; 16
  e2:	71 f4       	brne	.+28     	; 0x100 <I2C_Repeated_Start+0x2e>
	return 0;			/* Return 0 for repeated start condition fail */
	TWDR=read_address;		/* Write SLA+R in TWI data register */
  e4:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <I2C_Repeated_Start+0x18>
	status=TWSR&0xF8;		/* Read TWI status register */
  f0:	81 b1       	in	r24, 0x01	; 1
  f2:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x40)		/* Check for SLA+R transmitted &ack received */
  f4:	80 34       	cpi	r24, 0x40	; 64
  f6:	31 f0       	breq	.+12     	; 0x104 <I2C_Repeated_Start+0x32>
	return 1;			/* Return 1 to indicate ack received */
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
  f8:	88 34       	cpi	r24, 0x48	; 72
  fa:	31 f0       	breq	.+12     	; 0x108 <I2C_Repeated_Start+0x36>
	return 2;			/* Return 2 to indicate nack received */
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	08 95       	ret
	uint8_t status;		/* Declare variable */
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);/* Enable TWI, generate start */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status!=0x10)		/* Check for repeated start transmitted */
	return 0;			/* Return 0 for repeated start condition fail */
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	08 95       	ret
	TWDR=read_address;		/* Write SLA+R in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x40)		/* Check for SLA+R transmitted &ack received */
	return 1;			/* Return 1 to indicate ack received */
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	08 95       	ret
	if(status==0x48)		/* Check for SLA+R transmitted &nack received */
	return 2;			/* Return 2 to indicate nack received */
 108:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;			/* Else return 3 to indicate SLA+W failed */
}
 10a:	08 95       	ret

0000010c <I2C_Write>:
uint8_t I2C_Write(char data)	/* I2C write function */
{
	uint8_t status;		/* Declare variable */
	TWDR=data;			/* Copy data in TWI data register */
 10c:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
 112:	06 b6       	in	r0, 0x36	; 54
 114:	07 fe       	sbrs	r0, 7
 116:	fd cf       	rjmp	.-6      	; 0x112 <I2C_Write+0x6>
	status=TWSR&0xF8;		/* Read TWI status register */
 118:	81 b1       	in	r24, 0x01	; 1
 11a:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x28)		/* Check for data transmitted &ack received */
 11c:	88 32       	cpi	r24, 0x28	; 40
 11e:	21 f0       	breq	.+8      	; 0x128 <I2C_Write+0x1c>
	return 0;			/* Return 0 to indicate ack received */
	if(status==0x30)		/* Check for data transmitted &nack received */
 120:	80 33       	cpi	r24, 0x30	; 48
 122:	21 f0       	breq	.+8      	; 0x12c <I2C_Write+0x20>
	return 1;			/* Return 1 to indicate nack received */
	else
	return 2;			/* Else return 2 for data transmission failure */
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	08 95       	ret
	TWDR=data;			/* Copy data in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;		/* Read TWI status register */
	if(status==0x28)		/* Check for data transmitted &ack received */
	return 0;			/* Return 0 to indicate ack received */
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 95       	ret
	if(status==0x30)		/* Check for data transmitted &nack received */
	return 1;			/* Return 1 to indicate nack received */
 12c:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;			/* Else return 2 for data transmission failure */
}
 12e:	08 95       	ret

00000130 <I2C_Read_Ack>:
char I2C_Read_Ack()		/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA); /* Enable TWI, generation of ack */
 130:	84 ec       	ldi	r24, 0xC4	; 196
 132:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
 134:	06 b6       	in	r0, 0x36	; 54
 136:	07 fe       	sbrs	r0, 7
 138:	fd cf       	rjmp	.-6      	; 0x134 <I2C_Read_Ack+0x4>
	return TWDR;			/* Return received data */
 13a:	83 b1       	in	r24, 0x03	; 3
}
 13c:	08 95       	ret

0000013e <I2C_Read_Nack>:
char I2C_Read_Nack()		/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
 13e:	84 e8       	ldi	r24, 0x84	; 132
 140:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
 142:	06 b6       	in	r0, 0x36	; 54
 144:	07 fe       	sbrs	r0, 7
 146:	fd cf       	rjmp	.-6      	; 0x142 <I2C_Read_Nack+0x4>
	return TWDR;		/* Return received data */
 148:	83 b1       	in	r24, 0x03	; 3
}
 14a:	08 95       	ret

0000014c <I2C_Stop>:
void I2C_Stop()			/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
 14c:	84 e9       	ldi	r24, 0x94	; 148
 14e:	86 bf       	out	0x36, r24	; 54
	while(TWCR&(1<<TWSTO));	/* Wait until stop condition execution */
 150:	06 b6       	in	r0, 0x36	; 54
 152:	04 fc       	sbrc	r0, 4
 154:	fd cf       	rjmp	.-6      	; 0x150 <I2C_Stop+0x4>
}
 156:	08 95       	ret

00000158 <Keypad_init>:
int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//column 
	
void  Keypad_init()
{
	keypadDDR &= ~ (1<<R0)|(1<<R1)|(1<<R2)|(1<<R3);//set upper part of keypad port as input
 158:	88 98       	cbi	0x11, 0	; 17
	//this will be required for scanning the rows
	keypadDDR |= ((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));//set lower part of keypad port as output.This is
 15a:	81 b3       	in	r24, 0x11	; 17
 15c:	80 6f       	ori	r24, 0xF0	; 240
 15e:	81 bb       	out	0x11, r24	; 17
	//the part of the keypad port where the rows are connected.
	keypadPORT = 0xFF ;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	82 bb       	out	0x12, r24	; 18
 164:	08 95       	ret

00000166 <Keypad_getkey>:
}



char Keypad_getkey()
{
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	c0 e6       	ldi	r28, 0x60	; 96
 174:	d0 e0       	ldi	r29, 0x00	; 0
	int i, j;
	for(i = 0; i < 4; i++)
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	70 e0       	ldi	r23, 0x00	; 0
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ) | (1<<Key_padCol[3] ));
 17a:	de 01       	movw	r26, r28
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	50 e0       	ldi	r21, 0x00	; 0
 180:	92 b3       	in	r25, 0x12	; 18
 182:	fa 01       	movw	r30, r20
 184:	0c 90       	ld	r0, X
 186:	02 c0       	rjmp	.+4      	; 0x18c <Keypad_getkey+0x26>
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <Keypad_getkey+0x22>
 190:	9a 01       	movw	r18, r20
 192:	12 96       	adiw	r26, 0x02	; 2
 194:	0c 90       	ld	r0, X
 196:	12 97       	sbiw	r26, 0x02	; 2
 198:	02 c0       	rjmp	.+4      	; 0x19e <Keypad_getkey+0x38>
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Keypad_getkey+0x34>
 1a2:	2e 2b       	or	r18, r30
 1a4:	82 2f       	mov	r24, r18
 1a6:	89 2b       	or	r24, r25
 1a8:	9a 01       	movw	r18, r20
 1aa:	14 96       	adiw	r26, 0x04	; 4
 1ac:	0c 90       	ld	r0, X
 1ae:	14 97       	sbiw	r26, 0x04	; 4
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <Keypad_getkey+0x50>
 1b2:	22 0f       	add	r18, r18
 1b4:	33 1f       	adc	r19, r19
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <Keypad_getkey+0x4c>
 1ba:	28 2b       	or	r18, r24
 1bc:	ca 01       	movw	r24, r20
 1be:	16 96       	adiw	r26, 0x06	; 6
 1c0:	0c 90       	ld	r0, X
 1c2:	16 97       	sbiw	r26, 0x06	; 6
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Keypad_getkey+0x64>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	0a 94       	dec	r0
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Keypad_getkey+0x60>
 1ce:	82 2b       	or	r24, r18
 1d0:	82 bb       	out	0x12, r24	; 18

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad
 1d2:	92 b3       	in	r25, 0x12	; 18
 1d4:	88 81       	ld	r24, Y
 1d6:	22 96       	adiw	r28, 0x02	; 2
 1d8:	9a 01       	movw	r18, r20
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Keypad_getkey+0x7a>
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	8a 95       	dec	r24
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <Keypad_getkey+0x76>
 1e4:	82 2f       	mov	r24, r18
 1e6:	80 95       	com	r24
 1e8:	89 23       	and	r24, r25
 1ea:	82 bb       	out	0x12, r24	; 18
 1ec:	e8 e6       	ldi	r30, 0x68	; 104
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ee 24       	eor	r14, r14
 1f2:	e3 94       	inc	r14
 1f4:	f1 2c       	mov	r15, r1
 1f6:	00 e0       	ldi	r16, 0x00	; 0
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <Keypad_getkey+0xa0>
 1fc:	0f 5f       	subi	r16, 0xFF	; 255
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	e8 1a       	sub	r14, r24
 204:	f8 0a       	sbc	r15, r24

		for(j = 0; j < 4; j++)
		{
			if(!(keypadPIN & (1<<Key_padRow[j])))//check if key is pressed
 206:	80 b3       	in	r24, 0x10	; 16
 208:	20 81       	ld	r18, Z
 20a:	32 96       	adiw	r30, 0x02	; 2
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <Keypad_getkey+0xb0>
 212:	95 95       	asr	r25
 214:	87 95       	ror	r24
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <Keypad_getkey+0xac>
 21a:	80 fd       	sbrc	r24, 0
 21c:	50 c0       	rjmp	.+160    	; 0x2be <Keypad_getkey+0x158>
 21e:	ca 01       	movw	r24, r20
 220:	02 c0       	rjmp	.+4      	; 0x226 <Keypad_getkey+0xc0>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	2a 95       	dec	r18
 228:	e2 f7       	brpl	.-8      	; 0x222 <Keypad_getkey+0xbc>
 22a:	9c 01       	movw	r18, r24
			{
				while(!(keypadPIN & (1<<Key_padRow[j])));  //wait for key to be released  (Single press)
 22c:	80 b3       	in	r24, 0x10	; 16
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	82 23       	and	r24, r18
 232:	93 23       	and	r25, r19
 234:	89 2b       	or	r24, r25
 236:	d1 f3       	breq	.-12     	; 0x22c <Keypad_getkey+0xc6>
				switch(i)
 238:	61 30       	cpi	r22, 0x01	; 1
 23a:	71 05       	cpc	r23, r1
 23c:	c9 f0       	breq	.+50     	; 0x270 <Keypad_getkey+0x10a>
 23e:	24 f4       	brge	.+8      	; 0x248 <Keypad_getkey+0xe2>
 240:	61 15       	cp	r22, r1
 242:	71 05       	cpc	r23, r1
 244:	41 f0       	breq	.+16     	; 0x256 <Keypad_getkey+0xf0>
 246:	3b c0       	rjmp	.+118    	; 0x2be <Keypad_getkey+0x158>
 248:	62 30       	cpi	r22, 0x02	; 2
 24a:	71 05       	cpc	r23, r1
 24c:	f1 f0       	breq	.+60     	; 0x28a <Keypad_getkey+0x124>
 24e:	63 30       	cpi	r22, 0x03	; 3
 250:	71 05       	cpc	r23, r1
 252:	41 f1       	breq	.+80     	; 0x2a4 <Keypad_getkey+0x13e>
 254:	34 c0       	rjmp	.+104    	; 0x2be <Keypad_getkey+0x158>
				{
				case(0):
                	{
					if (j == 0) return '7';
 256:	01 15       	cp	r16, r1
 258:	11 05       	cpc	r17, r1
 25a:	f1 f1       	breq	.+124    	; 0x2d8 <Keypad_getkey+0x172>
					else if (j == 1) return '4';
 25c:	01 30       	cpi	r16, 0x01	; 1
 25e:	11 05       	cpc	r17, r1
 260:	e9 f1       	breq	.+122    	; 0x2dc <Keypad_getkey+0x176>
					else if (j == 2) return '1';
 262:	02 30       	cpi	r16, 0x02	; 2
 264:	11 05       	cpc	r17, r1
 266:	e1 f1       	breq	.+120    	; 0x2e0 <Keypad_getkey+0x17a>
					else if (j == 3) return '?';
 268:	03 30       	cpi	r16, 0x03	; 3
 26a:	11 05       	cpc	r17, r1
 26c:	41 f5       	brne	.+80     	; 0x2be <Keypad_getkey+0x158>
 26e:	3a c0       	rjmp	.+116    	; 0x2e4 <Keypad_getkey+0x17e>
					break;
                	}
				case(1):
                	{
					if (j == 0) return '8';
 270:	01 15       	cp	r16, r1
 272:	11 05       	cpc	r17, r1
 274:	c9 f1       	breq	.+114    	; 0x2e8 <Keypad_getkey+0x182>
					else if (j == 1) return '5';
 276:	01 30       	cpi	r16, 0x01	; 1
 278:	11 05       	cpc	r17, r1
 27a:	c1 f1       	breq	.+112    	; 0x2ec <Keypad_getkey+0x186>
					else if (j == 2) return '2';
 27c:	02 30       	cpi	r16, 0x02	; 2
 27e:	11 05       	cpc	r17, r1
 280:	b9 f1       	breq	.+110    	; 0x2f0 <Keypad_getkey+0x18a>
					else if (j == 3) return '0';
 282:	03 30       	cpi	r16, 0x03	; 3
 284:	11 05       	cpc	r17, r1
 286:	d9 f4       	brne	.+54     	; 0x2be <Keypad_getkey+0x158>
 288:	35 c0       	rjmp	.+106    	; 0x2f4 <Keypad_getkey+0x18e>
					break;
                	}
				case(2):
                	{
					if (j == 0) return '9';
 28a:	01 15       	cp	r16, r1
 28c:	11 05       	cpc	r17, r1
 28e:	a1 f1       	breq	.+104    	; 0x2f8 <Keypad_getkey+0x192>
					else if (j == 1) return '6';
 290:	01 30       	cpi	r16, 0x01	; 1
 292:	11 05       	cpc	r17, r1
 294:	99 f1       	breq	.+102    	; 0x2fc <Keypad_getkey+0x196>
					else if (j == 2) return '3';
 296:	02 30       	cpi	r16, 0x02	; 2
 298:	11 05       	cpc	r17, r1
 29a:	91 f1       	breq	.+100    	; 0x300 <Keypad_getkey+0x19a>
					else if (j == 3) return '=';
 29c:	03 30       	cpi	r16, 0x03	; 3
 29e:	11 05       	cpc	r17, r1
 2a0:	71 f4       	brne	.+28     	; 0x2be <Keypad_getkey+0x158>
 2a2:	30 c0       	rjmp	.+96     	; 0x304 <Keypad_getkey+0x19e>
					break;
                	}
				case(3):
                	{
					if (j == 0) return '/';
 2a4:	01 15       	cp	r16, r1
 2a6:	11 05       	cpc	r17, r1
 2a8:	79 f1       	breq	.+94     	; 0x308 <Keypad_getkey+0x1a2>
					else if (j == 1) return '*';
 2aa:	01 30       	cpi	r16, 0x01	; 1
 2ac:	11 05       	cpc	r17, r1
 2ae:	71 f1       	breq	.+92     	; 0x30c <Keypad_getkey+0x1a6>
					else if (j == 2) return '-';
 2b0:	02 30       	cpi	r16, 0x02	; 2
 2b2:	11 05       	cpc	r17, r1
 2b4:	69 f1       	breq	.+90     	; 0x310 <Keypad_getkey+0x1aa>
					else if (j == 3) return '+';
 2b6:	03 30       	cpi	r16, 0x03	; 3
 2b8:	11 05       	cpc	r17, r1
 2ba:	71 f5       	brne	.+92     	; 0x318 <Keypad_getkey+0x1b2>
 2bc:	2b c0       	rjmp	.+86     	; 0x314 <Keypad_getkey+0x1ae>
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ) | (1<<Key_padCol[3] ));

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad

		for(j = 0; j < 4; j++)
 2be:	94 e0       	ldi	r25, 0x04	; 4
 2c0:	e9 16       	cp	r14, r25
 2c2:	f1 04       	cpc	r15, r1
 2c4:	0c f4       	brge	.+2      	; 0x2c8 <Keypad_getkey+0x162>
 2c6:	9a cf       	rjmp	.-204    	; 0x1fc <Keypad_getkey+0x96>


char Keypad_getkey()
{
	int i, j;
	for(i = 0; i < 4; i++)
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	64 30       	cpi	r22, 0x04	; 4
 2ce:	71 05       	cpc	r23, r1
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <Keypad_getkey+0x16e>
 2d2:	56 cf       	rjmp	.-340    	; 0x180 <Keypad_getkey+0x1a>
                	}
				}
			}
		}
	}
	return 'A';//Return 'A' if no key is pressed.
 2d4:	81 e4       	ldi	r24, 0x41	; 65
 2d6:	26 c0       	rjmp	.+76     	; 0x324 <Keypad_getkey+0x1be>
				while(!(keypadPIN & (1<<Key_padRow[j])));  //wait for key to be released  (Single press)
				switch(i)
				{
				case(0):
                	{
					if (j == 0) return '7';
 2d8:	87 e3       	ldi	r24, 0x37	; 55
 2da:	24 c0       	rjmp	.+72     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 1) return '4';
 2dc:	84 e3       	ldi	r24, 0x34	; 52
 2de:	22 c0       	rjmp	.+68     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 2) return '1';
 2e0:	81 e3       	ldi	r24, 0x31	; 49
 2e2:	20 c0       	rjmp	.+64     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 3) return '?';
 2e4:	8f e3       	ldi	r24, 0x3F	; 63
 2e6:	1e c0       	rjmp	.+60     	; 0x324 <Keypad_getkey+0x1be>
					break;
                	}
				case(1):
                	{
					if (j == 0) return '8';
 2e8:	88 e3       	ldi	r24, 0x38	; 56
 2ea:	1c c0       	rjmp	.+56     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 1) return '5';
 2ec:	85 e3       	ldi	r24, 0x35	; 53
 2ee:	1a c0       	rjmp	.+52     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 2) return '2';
 2f0:	82 e3       	ldi	r24, 0x32	; 50
 2f2:	18 c0       	rjmp	.+48     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 3) return '0';
 2f4:	80 e3       	ldi	r24, 0x30	; 48
 2f6:	16 c0       	rjmp	.+44     	; 0x324 <Keypad_getkey+0x1be>
					break;
                	}
				case(2):
                	{
					if (j == 0) return '9';
 2f8:	89 e3       	ldi	r24, 0x39	; 57
 2fa:	14 c0       	rjmp	.+40     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 1) return '6';
 2fc:	86 e3       	ldi	r24, 0x36	; 54
 2fe:	12 c0       	rjmp	.+36     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 2) return '3';
 300:	83 e3       	ldi	r24, 0x33	; 51
 302:	10 c0       	rjmp	.+32     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 3) return '=';
 304:	8d e3       	ldi	r24, 0x3D	; 61
 306:	0e c0       	rjmp	.+28     	; 0x324 <Keypad_getkey+0x1be>
					break;
                	}
				case(3):
                	{
					if (j == 0) return '/';
 308:	8f e2       	ldi	r24, 0x2F	; 47
 30a:	0c c0       	rjmp	.+24     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 1) return '*';
 30c:	8a e2       	ldi	r24, 0x2A	; 42
 30e:	0a c0       	rjmp	.+20     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 2) return '-';
 310:	8d e2       	ldi	r24, 0x2D	; 45
 312:	08 c0       	rjmp	.+16     	; 0x324 <Keypad_getkey+0x1be>
					else if (j == 3) return '+';
 314:	8b e2       	ldi	r24, 0x2B	; 43
 316:	06 c0       	rjmp	.+12     	; 0x324 <Keypad_getkey+0x1be>
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ) | (1<<Key_padCol[3] ));

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad

		for(j = 0; j < 4; j++)
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	e8 16       	cp	r14, r24
 31c:	f1 04       	cpc	r15, r1
 31e:	0c f4       	brge	.+2      	; 0x322 <Keypad_getkey+0x1bc>
 320:	6d cf       	rjmp	.-294    	; 0x1fc <Keypad_getkey+0x96>
                	}
				}
			}
		}
	}
	return 'A';//Return 'A' if no key is pressed.
 322:	81 e4       	ldi	r24, 0x41	; 65
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	ef 90       	pop	r14
 330:	08 95       	ret

00000332 <LCD_peekapoo>:
	
}

void LCD_peekapoo(void)
{
	LCDControl |= (1<<ENABLE);
 332:	dd 9a       	sbi	0x1b, 5	; 27
	asm volatile("nop");
 334:	00 00       	nop
	asm volatile("nop");
 336:	00 00       	nop
	LCDControl &= ~(1<<ENABLE);
 338:	dd 98       	cbi	0x1b, 5	; 27
 33a:	08 95       	ret

0000033c <LCD_busy>:
#include "BAKR_LCD.h"
char ColumnsPositions[4] = {0 , 64 , 20 , 84};

void LCD_busy(void)
{
	LCDDataDir = 0;
 33c:	17 ba       	out	0x17, r1	; 23
	LCDControl |= (1<<READWRITE);
 33e:	df 9a       	sbi	0x1b, 7	; 27
	LCDControl &= ~(1<<RegisterSelect);
 340:	da 98       	cbi	0x1b, 2	; 27
	while (LCDData >= 0x80)
 342:	c7 9b       	sbis	0x18, 7	; 24
 344:	04 c0       	rjmp	.+8      	; 0x34e <LCD_busy+0x12>
	{
		LCD_peekapoo();
 346:	0e 94 99 01 	call	0x332	; 0x332 <LCD_peekapoo>
void LCD_busy(void)
{
	LCDDataDir = 0;
	LCDControl |= (1<<READWRITE);
	LCDControl &= ~(1<<RegisterSelect);
	while (LCDData >= 0x80)
 34a:	c7 99       	sbic	0x18, 7	; 24
 34c:	fc cf       	rjmp	.-8      	; 0x346 <LCD_busy+0xa>
	{
		LCD_peekapoo();
	}
	
	LCDDataDir = 0xFF;
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	87 bb       	out	0x17, r24	; 23
 352:	08 95       	ret

00000354 <LCD_command>:
	asm volatile("nop");
	LCDControl &= ~(1<<ENABLE);

}
void LCD_command(unsigned char command)
{
 354:	cf 93       	push	r28
 356:	c8 2f       	mov	r28, r24
	LCD_busy();
 358:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_busy>
	LCDData = command ;
 35c:	c8 bb       	out	0x18, r28	; 24
	LCDControl &= ~(1<<READWRITE | 1<<RegisterSelect);
 35e:	8b b3       	in	r24, 0x1b	; 27
 360:	8b 77       	andi	r24, 0x7B	; 123
 362:	8b bb       	out	0x1b, r24	; 27
	LCD_peekapoo();
 364:	0e 94 99 01 	call	0x332	; 0x332 <LCD_peekapoo>
	LCDData = 0;
 368:	18 ba       	out	0x18, r1	; 24
}
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <LCD_goto_location>:
	
}

void LCD_goto_location(uint8_t x ,uint8_t y)
{
	LCD_command( 0x80 +ColumnsPositions[y] + x);
 36e:	e6 2f       	mov	r30, r22
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	e0 59       	subi	r30, 0x90	; 144
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	80 58       	subi	r24, 0x80	; 128
 378:	90 81       	ld	r25, Z
 37a:	89 0f       	add	r24, r25
 37c:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_command>
 380:	08 95       	ret

00000382 <LCD_initialize>:

	
}
void LCD_initialize(void)
{
	LCDControlDir |= (1<<ENABLE) | (1<<READWRITE) |(1<<RegisterSelect) ;
 382:	8a b3       	in	r24, 0x1a	; 26
 384:	84 6a       	ori	r24, 0xA4	; 164
 386:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 388:	85 ea       	ldi	r24, 0xA5	; 165
 38a:	9e e0       	ldi	r25, 0x0E	; 14
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_initialize+0xa>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_initialize+0x10>
 392:	00 00       	nop
	_delay_ms(15);
	
	LCD_command(CLEAR_SCREEN); // clear screen
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_command>
 39a:	83 ef       	ldi	r24, 0xF3	; 243
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <LCD_initialize+0x1c>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_initialize+0x22>
 3a4:	00 00       	nop
	_delay_ms(2);
	LCD_command(0x38) ;
 3a6:	88 e3       	ldi	r24, 0x38	; 56
 3a8:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	90 e1       	ldi	r25, 0x10	; 16
 3ae:	9a 95       	dec	r25
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_initialize+0x2c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_initialize+0x32>
	_delay_us(50);
	LCD_command(0b00001110);
 3b4:	8e e0       	ldi	r24, 0x0E	; 14
 3b6:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_command>
 3ba:	80 e1       	ldi	r24, 0x10	; 16
 3bc:	8a 95       	dec	r24
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_initialize+0x3a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_initialize+0x40>
 3c2:	08 95       	ret

000003c4 <LCd_send_char>:
}



void LCd_send_char(unsigned char character)
{
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
	LCD_busy();
 3c8:	0e 94 9e 01 	call	0x33c	; 0x33c <LCD_busy>
	LCDData = character ;
 3cc:	c8 bb       	out	0x18, r28	; 24
	LCDControl &= ~(1<<READWRITE );
 3ce:	df 98       	cbi	0x1b, 7	; 27
	LCDControl |= (1<<RegisterSelect);
 3d0:	da 9a       	sbi	0x1b, 2	; 27
	LCD_peekapoo();
 3d2:	0e 94 99 01 	call	0x332	; 0x332 <LCD_peekapoo>
	LCDData = 0;
 3d6:	18 ba       	out	0x18, r1	; 24
	
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <LCD_send_string>:
	LCD_peekapoo();
	LCDData = 0;
}

void LCD_send_string( char *text )
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	while(*text > 0)
 3e2:	88 81       	ld	r24, Y
 3e4:	88 23       	and	r24, r24
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <LCD_send_string+0x18>
 3e8:	21 96       	adiw	r28, 0x01	; 1
	{
		LCd_send_char(*text);
 3ea:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCd_send_char>
	LCDData = 0;
}

void LCD_send_string( char *text )
{
	while(*text > 0)
 3ee:	89 91       	ld	r24, Y+
 3f0:	81 11       	cpse	r24, r1
 3f2:	fb cf       	rjmp	.-10     	; 0x3ea <LCD_send_string+0xe>
	{
		LCd_send_char(*text);
		*text++ ;
	}
	
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <LCD_clear_screen>:
	
}

void LCD_clear_screen(void){
	
	LCD_command(CLEAR_SCREEN);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 aa 01 	call	0x354	; 0x354 <LCD_command>
 400:	86 ea       	ldi	r24, 0xA6	; 166
 402:	8a 95       	dec	r24
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	08 95       	ret

0000040a <EEPROM_Read>:
			}
		
	}
	return 0;
}
int EEPROM_Read(){
 40a:	ef 92       	push	r14
 40c:	ff 92       	push	r15
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
 41a:	28 97       	sbiw	r28, 0x08	; 8
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
	
		
		
char y ;
char pass2[8] = {0} ;
 426:	8e 01       	movw	r16, r28
 428:	0f 5f       	subi	r16, 0xFF	; 255
 42a:	1f 4f       	sbci	r17, 0xFF	; 255
 42c:	88 e0       	ldi	r24, 0x08	; 8
 42e:	f8 01       	movw	r30, r16
 430:	11 92       	st	Z+, r1
 432:	8a 95       	dec	r24
 434:	e9 f7       	brne	.-6      	; 0x430 <EEPROM_Read+0x26>
	 
	I2C_Start(EEPROM_WRITE_ADDRESS); 
 436:	88 ea       	ldi	r24, 0xA8	; 168
 438:	0e 94 4c 00 	call	0x98	; 0x98 <I2C_Start>
	I2C_Write(0x00); 
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_Write>
	I2C_Repeated_Start(EEPROM_READ_ADDRESS) ;
 442:	89 ea       	ldi	r24, 0xA9	; 169
 444:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Repeated_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 448:	83 ec       	ldi	r24, 0xC3	; 195
 44a:	99 e0       	ldi	r25, 0x09	; 9
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <EEPROM_Read+0x42>
 450:	00 c0       	rjmp	.+0      	; 0x452 <EEPROM_Read+0x48>
 452:	00 00       	nop
 454:	78 01       	movw	r14, r16
	_delay_ms(10);
	
	for(int i = 0 ; i < 8 ; i++){
 456:	00 e0       	ldi	r16, 0x00	; 0
 458:	10 e0       	ldi	r17, 0x00	; 0
		if(i<7 )
 45a:	07 30       	cpi	r16, 0x07	; 7
 45c:	11 05       	cpc	r17, r1
 45e:	5c f4       	brge	.+22     	; 0x476 <EEPROM_Read+0x6c>
		{
			y = I2C_Read_Ack();
 460:	0e 94 98 00 	call	0x130	; 0x130 <I2C_Read_Ack>
 464:	e7 ea       	ldi	r30, 0xA7	; 167
 466:	f1 e6       	ldi	r31, 0x61	; 97
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <EEPROM_Read+0x5e>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <EEPROM_Read+0x64>
 46e:	00 00       	nop
			_delay_ms(100);
			pass2[i]  = y  ;
 470:	f7 01       	movw	r30, r14
 472:	80 83       	st	Z, r24
 474:	0a c0       	rjmp	.+20     	; 0x48a <EEPROM_Read+0x80>
		}
		else {
			y = I2C_Read_Nack();
 476:	0e 94 9f 00 	call	0x13e	; 0x13e <I2C_Read_Nack>
 47a:	e7 ea       	ldi	r30, 0xA7	; 167
 47c:	f1 e6       	ldi	r31, 0x61	; 97
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <EEPROM_Read+0x74>
 482:	00 c0       	rjmp	.+0      	; 0x484 <EEPROM_Read+0x7a>
 484:	00 00       	nop
			_delay_ms(100);
			pass2[i]  = y  ;
 486:	f7 01       	movw	r30, r14
 488:	80 83       	st	Z, r24
	I2C_Start(EEPROM_WRITE_ADDRESS); 
	I2C_Write(0x00); 
	I2C_Repeated_Start(EEPROM_READ_ADDRESS) ;
	_delay_ms(10);
	
	for(int i = 0 ; i < 8 ; i++){
 48a:	0f 5f       	subi	r16, 0xFF	; 255
 48c:	1f 4f       	sbci	r17, 0xFF	; 255
 48e:	ff ef       	ldi	r31, 0xFF	; 255
 490:	ef 1a       	sub	r14, r31
 492:	ff 0a       	sbc	r15, r31
 494:	08 30       	cpi	r16, 0x08	; 8
 496:	11 05       	cpc	r17, r1
 498:	01 f7       	brne	.-64     	; 0x45a <EEPROM_Read+0x50>
			_delay_ms(100);
			pass2[i]  = y  ;
		}
	
	}
	I2C_Stop();
 49a:	0e 94 a6 00 	call	0x14c	; 0x14c <I2C_Stop>
	 return atoi(pass2);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	0e 94 9d 03 	call	0x73a	; 0x73a <atoi>
	
	
	
	
}
 4a6:	28 96       	adiw	r28, 0x08	; 8
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	08 95       	ret

000004c0 <get_password_No_Display>:

int get_password_No_Display(char * password){
 4c0:	df 92       	push	r13
 4c2:	ef 92       	push	r14
 4c4:	ff 92       	push	r15
 4c6:	0f 93       	push	r16
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	d8 2e       	mov	r13, r24
 4d0:	d9 2f       	mov	r29, r25
 4d2:	e8 2e       	mov	r14, r24
 4d4:	f9 2e       	mov	r15, r25
	char x ;
	
	int counter = 0 ;
 4d6:	00 e0       	ldi	r16, 0x00	; 0
 4d8:	10 e0       	ldi	r17, 0x00	; 0
	int password_int;
	
	while(counter<8){
		
		x = Keypad_getkey();
 4da:	0e 94 b3 00 	call	0x166	; 0x166 <Keypad_getkey>
 4de:	c8 2f       	mov	r28, r24
		
		switch(x){
 4e0:	81 34       	cpi	r24, 0x41	; 65
 4e2:	91 f0       	breq	.+36     	; 0x508 <get_password_No_Display+0x48>
			
			case 'A':
			break;
			
			default :
			LCd_send_char('*');
 4e4:	8a e2       	ldi	r24, 0x2A	; 42
 4e6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCd_send_char>
 4ea:	87 ea       	ldi	r24, 0xA7	; 167
 4ec:	91 e6       	ldi	r25, 0x61	; 97
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <get_password_No_Display+0x2e>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <get_password_No_Display+0x34>
 4f4:	00 00       	nop
			_delay_ms(100);
			password[counter] = x ;
 4f6:	f7 01       	movw	r30, r14
 4f8:	c1 93       	st	Z+, r28
 4fa:	7f 01       	movw	r14, r30
			counter++ ;
 4fc:	0f 5f       	subi	r16, 0xFF	; 255
 4fe:	1f 4f       	sbci	r17, 0xFF	; 255
	char x ;
	
	int counter = 0 ;
	int password_int;
	
	while(counter<8){
 500:	08 30       	cpi	r16, 0x08	; 8
 502:	11 05       	cpc	r17, r1
 504:	51 f7       	brne	.-44     	; 0x4da <get_password_No_Display+0x1a>
 506:	03 c0       	rjmp	.+6      	; 0x50e <get_password_No_Display+0x4e>
 508:	08 30       	cpi	r16, 0x08	; 8
 50a:	11 05       	cpc	r17, r1
 50c:	34 f3       	brlt	.-52     	; 0x4da <get_password_No_Display+0x1a>
			break;
		}
		
		
	}
	password_int = atoi(password);
 50e:	8d 2d       	mov	r24, r13
 510:	9d 2f       	mov	r25, r29
 512:	0e 94 9d 03 	call	0x73a	; 0x73a <atoi>
	return password_int ;
}
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	ef 90       	pop	r14
 522:	df 90       	pop	r13
 524:	08 95       	ret

00000526 <get_password_Display>:

int get_password_Display(char * password){
 526:	df 92       	push	r13
 528:	ef 92       	push	r14
 52a:	ff 92       	push	r15
 52c:	0f 93       	push	r16
 52e:	1f 93       	push	r17
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	d8 2e       	mov	r13, r24
 536:	d9 2f       	mov	r29, r25
 538:	e8 2e       	mov	r14, r24
 53a:	f9 2e       	mov	r15, r25
	char x ;
	
	int counter = 0 ;
 53c:	00 e0       	ldi	r16, 0x00	; 0
 53e:	10 e0       	ldi	r17, 0x00	; 0
	int password_int;
	
	while(counter<8){
		
		x = Keypad_getkey();
 540:	0e 94 b3 00 	call	0x166	; 0x166 <Keypad_getkey>
 544:	c8 2f       	mov	r28, r24
		
		switch(x){
 546:	81 34       	cpi	r24, 0x41	; 65
 548:	89 f0       	breq	.+34     	; 0x56c <get_password_Display+0x46>
			
			case 'A':
			break;
			
			default :
			LCd_send_char(x);
 54a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCd_send_char>
 54e:	87 ea       	ldi	r24, 0xA7	; 167
 550:	91 e6       	ldi	r25, 0x61	; 97
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <get_password_Display+0x2c>
 556:	00 c0       	rjmp	.+0      	; 0x558 <get_password_Display+0x32>
 558:	00 00       	nop
			_delay_ms(100);
			password[counter] = x ;
 55a:	f7 01       	movw	r30, r14
 55c:	c1 93       	st	Z+, r28
 55e:	7f 01       	movw	r14, r30
			counter++ ;
 560:	0f 5f       	subi	r16, 0xFF	; 255
 562:	1f 4f       	sbci	r17, 0xFF	; 255
	char x ;
	
	int counter = 0 ;
	int password_int;
	
	while(counter<8){
 564:	08 30       	cpi	r16, 0x08	; 8
 566:	11 05       	cpc	r17, r1
 568:	59 f7       	brne	.-42     	; 0x540 <get_password_Display+0x1a>
 56a:	03 c0       	rjmp	.+6      	; 0x572 <get_password_Display+0x4c>
 56c:	08 30       	cpi	r16, 0x08	; 8
 56e:	11 05       	cpc	r17, r1
 570:	3c f3       	brlt	.-50     	; 0x540 <get_password_Display+0x1a>
			break;
		}
		
		
	}
	password_int = atoi(password);
 572:	8d 2d       	mov	r24, r13
 574:	9d 2f       	mov	r25, r29
 576:	0e 94 9d 03 	call	0x73a	; 0x73a <atoi>
	return password_int ;
}
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	08 95       	ret

0000058a <EEPROM_Save>:
void EEPROM_Save(char * password){
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	8c 01       	movw	r16, r24
	  
	   
	I2C_Start(EEPROM_WRITE_ADDRESS);
 594:	88 ea       	ldi	r24, 0xA8	; 168
 596:	0e 94 4c 00 	call	0x98	; 0x98 <I2C_Start>
	I2C_Write(0x00);
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_Write>
 5a0:	e8 01       	movw	r28, r16
 5a2:	08 5f       	subi	r16, 0xF8	; 248
 5a4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for (int i = 0 ; i <8 ; i++)
	{
		I2C_Write(password[i]);
 5a6:	89 91       	ld	r24, Y+
 5a8:	0e 94 86 00 	call	0x10c	; 0x10c <I2C_Write>
 5ac:	87 ea       	ldi	r24, 0xA7	; 167
 5ae:	91 e6       	ldi	r25, 0x61	; 97
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <EEPROM_Save+0x26>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <EEPROM_Save+0x2c>
 5b6:	00 00       	nop
	  
	   
	I2C_Start(EEPROM_WRITE_ADDRESS);
	I2C_Write(0x00);
	
	for (int i = 0 ; i <8 ; i++)
 5b8:	c0 17       	cp	r28, r16
 5ba:	d1 07       	cpc	r29, r17
 5bc:	a1 f7       	brne	.-24     	; 0x5a6 <EEPROM_Save+0x1c>
	{
		I2C_Write(password[i]);
		_delay_ms(100);

	}
	I2C_Stop();
 5be:	0e 94 a6 00 	call	0x14c	; 0x14c <I2C_Stop>
 5c2:	83 ec       	ldi	r24, 0xC3	; 195
 5c4:	99 e0       	ldi	r25, 0x09	; 9
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <EEPROM_Save+0x3c>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <EEPROM_Save+0x42>
 5cc:	00 00       	nop
	_delay_ms(10);
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	08 95       	ret

000005d8 <new_password_prompt>:

void new_password_prompt(){
	
	 PORTA |= (1<<YELLOW_LED) ;
 5d8:	d8 9a       	sbi	0x1b, 0	; 27
	 LCD_clear_screen();
 5da:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear_screen>
	 LCD_goto_location(0,0);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_goto_location>
 5e6:	83 ec       	ldi	r24, 0xC3	; 195
 5e8:	99 e0       	ldi	r25, 0x09	; 9
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <new_password_prompt+0x12>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <new_password_prompt+0x18>
 5f0:	00 00       	nop
	 _delay_ms(10);
	 LCD_send_string("new  password:  ");      // prompt the user to enter the password for the first time
 5f2:	84 e7       	ldi	r24, 0x74	; 116
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_send_string>
 5fa:	9f e9       	ldi	r25, 0x9F	; 159
 5fc:	26 e8       	ldi	r18, 0x86	; 134
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	91 50       	subi	r25, 0x01	; 1
 602:	20 40       	sbci	r18, 0x00	; 0
 604:	80 40       	sbci	r24, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <new_password_prompt+0x28>
 608:	00 c0       	rjmp	.+0      	; 0x60a <new_password_prompt+0x32>
 60a:	00 00       	nop
 60c:	08 95       	ret

0000060e <door_closed>:
	 _delay_ms(500);
	}

void door_closed(void){
	
	PORTA |= (1<<SERVO) ;
 60e:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 610:	89 ef       	ldi	r24, 0xF9	; 249
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	f1 f7       	brne	.-4      	; 0x614 <door_closed+0x6>
 618:	00 c0       	rjmp	.+0      	; 0x61a <door_closed+0xc>
 61a:	00 00       	nop
	_delay_us(1000);
	PORTA &= ~ (1<<SERVO);
 61c:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 61e:	9f e7       	ldi	r25, 0x7F	; 127
 620:	2a e1       	ldi	r18, 0x1A	; 26
 622:	86 e0       	ldi	r24, 0x06	; 6
 624:	91 50       	subi	r25, 0x01	; 1
 626:	20 40       	sbci	r18, 0x00	; 0
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	e1 f7       	brne	.-8      	; 0x624 <door_closed+0x16>
 62c:	00 c0       	rjmp	.+0      	; 0x62e <door_closed+0x20>
 62e:	00 00       	nop
 630:	08 95       	ret

00000632 <door_opened>:
	_delay_ms(2000);
	
}
void door_opened(void){
	
	PORTA |= (1<<SERVO) ;
 632:	dc 9a       	sbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 634:	86 e7       	ldi	r24, 0x76	; 118
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <door_opened+0x6>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <door_opened+0xc>
 63e:	00 00       	nop
	_delay_us(1500);
	PORTA &= ~ (1<<SERVO);
 640:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 642:	9f e7       	ldi	r25, 0x7F	; 127
 644:	2a e1       	ldi	r18, 0x1A	; 26
 646:	86 e0       	ldi	r24, 0x06	; 6
 648:	91 50       	subi	r25, 0x01	; 1
 64a:	20 40       	sbci	r18, 0x00	; 0
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	e1 f7       	brne	.-8      	; 0x648 <door_opened+0x16>
 650:	00 c0       	rjmp	.+0      	; 0x652 <door_opened+0x20>
 652:	00 00       	nop
 654:	08 95       	ret

00000656 <main>:
void door_closed(void); 
void door_opened(void); 


int main(void)
{
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
 65e:	28 97       	sbiw	r28, 0x08	; 8
 660:	0f b6       	in	r0, 0x3f	; 63
 662:	f8 94       	cli
 664:	de bf       	out	0x3e, r29	; 62
 666:	0f be       	out	0x3f, r0	; 63
 668:	cd bf       	out	0x3d, r28	; 61
	//UART_CONFIG config = {UART_BR_9600,UART_POLLING,NO_PARITY} ;
	//UART_Initialize(&config);
	
	int real_password,test_password,EEPROM_password ;
	char password[8] = {0} ;
 66a:	8e 01       	movw	r16, r28
 66c:	0f 5f       	subi	r16, 0xFF	; 255
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	88 e0       	ldi	r24, 0x08	; 8
 672:	f8 01       	movw	r30, r16
 674:	11 92       	st	Z+, r1
 676:	8a 95       	dec	r24
 678:	e9 f7       	brne	.-6      	; 0x674 <main+0x1e>
	
	DDRA  |= (1<<YELLOW_LED)|(1<<RED_LED)|(1<<GREEN_LED)|(1<<SERVO) ;
 67a:	8a b3       	in	r24, 0x1a	; 26
 67c:	8b 61       	ori	r24, 0x1B	; 27
 67e:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~ (1<<YELLOW_LED)|(1<<RED_LED)|(1<<GREEN_LED)|(1<<SERVO);
 680:	d8 98       	cbi	0x1b, 0	; 27
	DDRA &= ~(1<<NEW_PASS_BUTTON) ; 
 682:	d6 98       	cbi	0x1a, 6	; 26
	
	Keypad_init();
 684:	0e 94 ac 00 	call	0x158	; 0x158 <Keypad_init>
	LCD_initialize();
 688:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_initialize>
	LCD_peekapoo();
 68c:	0e 94 99 01 	call	0x332	; 0x332 <LCD_peekapoo>
	I2C_Init();
 690:	0e 94 49 00 	call	0x92	; 0x92 <I2C_Init>
	door_closed();			
 694:	0e 94 07 03 	call	0x60e	; 0x60e <door_closed>
	

	
	
			
		new_password_prompt();
 698:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <new_password_prompt>
	real_password = get_password_No_Display(password);	// get the password from the user for the first time
 69c:	c8 01       	movw	r24, r16
 69e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <get_password_No_Display>
	PORTA &= ~(1<<YELLOW_LED);
 6a2:	d8 98       	cbi	0x1b, 0	; 27
	EEPROM_Save(password);  	//save the password to eeprom location 0x00 
 6a4:	c8 01       	movw	r24, r16
 6a6:	0e 94 c5 02 	call	0x58a	; 0x58a <EEPROM_Save>
		
			
	
		
			
			LCD_clear_screen();
 6aa:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear_screen>
			LCD_goto_location(0,0);
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_goto_location>
 6b6:	83 ec       	ldi	r24, 0xC3	; 195
 6b8:	99 e0       	ldi	r25, 0x09	; 9
 6ba:	01 97       	sbiw	r24, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <main+0x64>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <main+0x6a>
 6c0:	00 00       	nop
			_delay_ms(10);
			LCD_send_string("enter password:  ");      // prompt the user to enter the password
 6c2:	85 e8       	ldi	r24, 0x85	; 133
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_send_string>
			
			test_password = get_password_Display(password); // get the password
 6ca:	ce 01       	movw	r24, r28
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	0e 94 93 02 	call	0x526	; 0x526 <get_password_Display>
 6d2:	7c 01       	movw	r14, r24
			
			EEPROM_password = EEPROM_Read();	// get the password saved in the EEPROM
 6d4:	0e 94 05 02 	call	0x40a	; 0x40a <EEPROM_Read>
 6d8:	8c 01       	movw	r16, r24
 6da:	9f e9       	ldi	r25, 0x9F	; 159
 6dc:	e6 e8       	ldi	r30, 0x86	; 134
 6de:	f1 e0       	ldi	r31, 0x01	; 1
 6e0:	91 50       	subi	r25, 0x01	; 1
 6e2:	e0 40       	sbci	r30, 0x00	; 0
 6e4:	f0 40       	sbci	r31, 0x00	; 0
 6e6:	e1 f7       	brne	.-8      	; 0x6e0 <main+0x8a>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <main+0x94>
 6ea:	00 00       	nop
			_delay_ms(500);
			
			LCD_clear_screen();
 6ec:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_clear_screen>
			LCD_goto_location(0,0);
 6f0:	60 e0       	ldi	r22, 0x00	; 0
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_goto_location>
 6f8:	83 ec       	ldi	r24, 0xC3	; 195
 6fa:	99 e0       	ldi	r25, 0x09	; 9
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	f1 f7       	brne	.-4      	; 0x6fc <main+0xa6>
 700:	00 c0       	rjmp	.+0      	; 0x702 <main+0xac>
 702:	00 00       	nop
			_delay_ms(10);
			LCD_send_string("authenticating..");
 704:	87 e9       	ldi	r24, 0x97	; 151
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_send_string>
			LCD_goto_location(0,2);
 70c:	62 e0       	ldi	r22, 0x02	; 2
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_goto_location>
			if (EEPROM_password == test_password)
 714:	e0 16       	cp	r14, r16
 716:	f1 06       	cpc	r15, r17
 718:	41 f4       	brne	.+16     	; 0x72a <main+0xd4>
			{
				
				LCD_send_string("success");
 71a:	88 ea       	ldi	r24, 0xA8	; 168
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_send_string>
				PORTA |= (1<<GREEN_LED) ;
 722:	db 9a       	sbi	0x1b, 3	; 27
				door_opened();
 724:	0e 94 19 03 	call	0x632	; 0x632 <door_opened>
 728:	c0 cf       	rjmp	.-128    	; 0x6aa <main+0x54>
			}
			else
			{
				LCD_send_string("failed");
 72a:	80 eb       	ldi	r24, 0xB0	; 176
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_send_string>
				PORTA |= (1<<RED_LED) ;
 732:	d9 9a       	sbi	0x1b, 1	; 27
				door_closed();
 734:	0e 94 07 03 	call	0x60e	; 0x60e <door_closed>
 738:	b8 cf       	rjmp	.-144    	; 0x6aa <main+0x54>

0000073a <atoi>:
 73a:	fc 01       	movw	r30, r24
 73c:	88 27       	eor	r24, r24
 73e:	99 27       	eor	r25, r25
 740:	e8 94       	clt
 742:	21 91       	ld	r18, Z+
 744:	20 32       	cpi	r18, 0x20	; 32
 746:	e9 f3       	breq	.-6      	; 0x742 <atoi+0x8>
 748:	29 30       	cpi	r18, 0x09	; 9
 74a:	10 f0       	brcs	.+4      	; 0x750 <atoi+0x16>
 74c:	2e 30       	cpi	r18, 0x0E	; 14
 74e:	c8 f3       	brcs	.-14     	; 0x742 <atoi+0x8>
 750:	2b 32       	cpi	r18, 0x2B	; 43
 752:	41 f0       	breq	.+16     	; 0x764 <atoi+0x2a>
 754:	2d 32       	cpi	r18, 0x2D	; 45
 756:	39 f4       	brne	.+14     	; 0x766 <atoi+0x2c>
 758:	68 94       	set
 75a:	04 c0       	rjmp	.+8      	; 0x764 <atoi+0x2a>
 75c:	0e 94 bb 03 	call	0x776	; 0x776 <__mulhi_const_10>
 760:	82 0f       	add	r24, r18
 762:	91 1d       	adc	r25, r1
 764:	21 91       	ld	r18, Z+
 766:	20 53       	subi	r18, 0x30	; 48
 768:	2a 30       	cpi	r18, 0x0A	; 10
 76a:	c0 f3       	brcs	.-16     	; 0x75c <atoi+0x22>
 76c:	1e f4       	brtc	.+6      	; 0x774 <atoi+0x3a>
 76e:	90 95       	com	r25
 770:	81 95       	neg	r24
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	08 95       	ret

00000776 <__mulhi_const_10>:
 776:	7a e0       	ldi	r23, 0x0A	; 10
 778:	97 9f       	mul	r25, r23
 77a:	90 2d       	mov	r25, r0
 77c:	87 9f       	mul	r24, r23
 77e:	80 2d       	mov	r24, r0
 780:	91 0d       	add	r25, r1
 782:	11 24       	eor	r1, r1
 784:	08 95       	ret

00000786 <_exit>:
 786:	f8 94       	cli

00000788 <__stop_program>:
 788:	ff cf       	rjmp	.-2      	; 0x788 <__stop_program>
