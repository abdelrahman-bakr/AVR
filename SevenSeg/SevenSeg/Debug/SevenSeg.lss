
SevenSeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ad  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068f  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003de  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001494  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  00001518  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000149  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	DDRC = 0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
  70:	81 bb       	out	0x11, r24	; 17
	DDRB |=(1<<PB0);
  72:	b8 9a       	sbi	0x17, 0	; 23
    PORTB &=  ~(1<<PB0);
  74:	c0 98       	cbi	0x18, 0	; 24
   
    while (1) 
    {		
		inc_99();
  76:	0e 94 84 00 	call	0x108	; 0x108 <inc_99>
  7a:	fd cf       	rjmp	.-6      	; 0x76 <main+0xa>

0000007c <SevSeg_write_num>:
#include "SevSeg.h"

char SevSeg_write_num(int num  )
{ char port ;
	
	if (num == 0 )
  7c:	00 97       	sbiw	r24, 0x00	; 0
  7e:	e1 f0       	breq	.+56     	; 0xb8 <SevSeg_write_num+0x3c>
	{
		port = 0b01000000;
	}
	else if (num == 1 )
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	91 05       	cpc	r25, r1
  84:	d9 f0       	breq	.+54     	; 0xbc <SevSeg_write_num+0x40>
	{
		port = 0b01111001 ;
	}
	else if (num == 2 )
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	91 05       	cpc	r25, r1
  8a:	d1 f0       	breq	.+52     	; 0xc0 <SevSeg_write_num+0x44>
	{
		port = 0b00100100 ;
	}
	else if (num == 3)
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	91 05       	cpc	r25, r1
  90:	c9 f0       	breq	.+50     	; 0xc4 <SevSeg_write_num+0x48>
	{
		port = 0b00110000 ;
	}
	else if (num == 4 )
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	91 05       	cpc	r25, r1
  96:	c1 f0       	breq	.+48     	; 0xc8 <SevSeg_write_num+0x4c>
	{
		port = 0b00011001 ;
	}
	else if (num == 5 )
  98:	85 30       	cpi	r24, 0x05	; 5
  9a:	91 05       	cpc	r25, r1
  9c:	b9 f0       	breq	.+46     	; 0xcc <SevSeg_write_num+0x50>
	{
		port = 0b00010010 ;
	}
	else if (num == 6 )
  9e:	86 30       	cpi	r24, 0x06	; 6
  a0:	91 05       	cpc	r25, r1
  a2:	b1 f0       	breq	.+44     	; 0xd0 <SevSeg_write_num+0x54>
	{
		port = 0b00000010 ;
	}
	else if (num == 7 )
  a4:	87 30       	cpi	r24, 0x07	; 7
  a6:	91 05       	cpc	r25, r1
  a8:	a9 f0       	breq	.+42     	; 0xd4 <SevSeg_write_num+0x58>
	{
		port = 0b01111000 ;
	}
	else if (num == 8 )
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	91 05       	cpc	r25, r1
  ae:	a1 f0       	breq	.+40     	; 0xd8 <SevSeg_write_num+0x5c>
	{
		port = 0b00000000 ;
	}
	else if (num == 9 )
  b0:	09 97       	sbiw	r24, 0x09	; 9
  b2:	99 f4       	brne	.+38     	; 0xda <SevSeg_write_num+0x5e>
	{
		port = 0b00010000 ;
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	11 c0       	rjmp	.+34     	; 0xda <SevSeg_write_num+0x5e>
char SevSeg_write_num(int num  )
{ char port ;
	
	if (num == 0 )
	{
		port = 0b01000000;
  b8:	20 e4       	ldi	r18, 0x40	; 64
  ba:	0f c0       	rjmp	.+30     	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 1 )
	{
		port = 0b01111001 ;
  bc:	29 e7       	ldi	r18, 0x79	; 121
  be:	0d c0       	rjmp	.+26     	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 2 )
	{
		port = 0b00100100 ;
  c0:	24 e2       	ldi	r18, 0x24	; 36
  c2:	0b c0       	rjmp	.+22     	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 3)
	{
		port = 0b00110000 ;
  c4:	20 e3       	ldi	r18, 0x30	; 48
  c6:	09 c0       	rjmp	.+18     	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 4 )
	{
		port = 0b00011001 ;
  c8:	29 e1       	ldi	r18, 0x19	; 25
  ca:	07 c0       	rjmp	.+14     	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 5 )
	{
		port = 0b00010010 ;
  cc:	22 e1       	ldi	r18, 0x12	; 18
  ce:	05 c0       	rjmp	.+10     	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 6 )
	{
		port = 0b00000010 ;
  d0:	22 e0       	ldi	r18, 0x02	; 2
  d2:	03 c0       	rjmp	.+6      	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 7 )
	{
		port = 0b01111000 ;
  d4:	28 e7       	ldi	r18, 0x78	; 120
  d6:	01 c0       	rjmp	.+2      	; 0xda <SevSeg_write_num+0x5e>
	}
	else if (num == 8 )
	{
		port = 0b00000000 ;
  d8:	20 e0       	ldi	r18, 0x00	; 0
	else if (num == 9 )
	{
		port = 0b00010000 ;
	}
	return port ;
}
  da:	82 2f       	mov	r24, r18
  dc:	08 95       	ret

000000de <ButtonPressed>:

char ButtonPressed(char reg , char pin )
{
	if (reg & (1<<pin))
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <ButtonPressed+0x8>
  e2:	95 95       	asr	r25
  e4:	87 95       	ror	r24
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <ButtonPressed+0x4>
  ea:	80 ff       	sbrs	r24, 0
  ec:	0b c0       	rjmp	.+22     	; 0x104 <ButtonPressed+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f e9       	ldi	r18, 0x9F	; 159
  f0:	86 e8       	ldi	r24, 0x86	; 134
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <ButtonPressed+0x16>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <ButtonPressed+0x20>
  fe:	00 00       	nop
	{
		_delay_ms(500);
		if(reg & (1<<pin))
		{
			return 1 ;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
		}
	}
	else return 0 ;
 104:	80 e0       	ldi	r24, 0x00	; 0
}
 106:	08 95       	ret

00000108 <inc_99>:

void inc_99(void){
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
	
	 int i = 0 ;
	 int j = 0 ;
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
	else return 0 ;
}

void inc_99(void){
	
	 int i = 0 ;
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
	 int j = 0 ;
	while(i< 10)
	{
		if(ButtonPressed(PINA,PINA0))
		{
			PORTB^=(1<<PB0);
 11a:	ff 24       	eor	r15, r15
 11c:	f3 94       	inc	r15
	
	 int i = 0 ;
	 int j = 0 ;
	while(i< 10)
	{
		if(ButtonPressed(PINA,PINA0))
 11e:	89 b3       	in	r24, 0x19	; 25
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	0e 94 6f 00 	call	0xde	; 0xde <ButtonPressed>
 126:	88 23       	and	r24, r24
 128:	61 f0       	breq	.+24     	; 0x142 <inc_99+0x3a>
		{
			PORTB^=(1<<PB0);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8f 25       	eor	r24, r15
 12e:	88 bb       	out	0x18, r24	; 24
			PORTC = SevSeg_write_num(i);
 130:	c8 01       	movw	r24, r16
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <SevSeg_write_num>
 136:	85 bb       	out	0x15, r24	; 21
			PORTD = SevSeg_write_num(j);
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 3e 00 	call	0x7c	; 0x7c <SevSeg_write_num>
 13e:	82 bb       	out	0x12, r24	; 18
			j++;
 140:	21 96       	adiw	r28, 0x01	; 1
			
		}
		if (j == 10 )
 142:	ca 30       	cpi	r28, 0x0A	; 10
 144:	d1 05       	cpc	r29, r1
 146:	21 f4       	brne	.+8      	; 0x150 <inc_99+0x48>
		{
			j =0 ;
			i++ ;
 148:	0f 5f       	subi	r16, 0xFF	; 255
 14a:	1f 4f       	sbci	r17, 0xFF	; 255
			j++;
			
		}
		if (j == 10 )
		{
			j =0 ;
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	d0 e0       	ldi	r29, 0x00	; 0

void inc_99(void){
	
	 int i = 0 ;
	 int j = 0 ;
	while(i< 10)
 150:	0a 30       	cpi	r16, 0x0A	; 10
 152:	11 05       	cpc	r17, r1
 154:	24 f3       	brlt	.-56     	; 0x11e <inc_99+0x16>
		}
		
	}
	
	
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
