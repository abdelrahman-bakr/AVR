
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000282  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc8  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074f  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000416  00000000  00000000  000016df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000356  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000022e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 84 00 	call	0x108	; 0x108 <main>
  7a:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_peekapoo>:
	
}

void LCD_peekapoo(void)
{
		LCDControl |= (1<<ENABLE);
  82:	95 9a       	sbi	0x12, 5	; 18
		asm volatile("nop");
  84:	00 00       	nop
		asm volatile("nop");
  86:	00 00       	nop
		LCDControl &= ~(1<<ENABLE);
  88:	95 98       	cbi	0x12, 5	; 18
  8a:	08 95       	ret

0000008c <LCD_busy>:
}


void LCD_busy(void)
{
	LCDDataDir = 0; 
  8c:	14 ba       	out	0x14, r1	; 20
	LCDControl |= (1<<READWRITE);
  8e:	97 9a       	sbi	0x12, 7	; 18
	LCDControl &= ~(1<<RegisterSelect); 
  90:	92 98       	cbi	0x12, 2	; 18
	while (LCDData >= 0x80)
  92:	af 9b       	sbis	0x15, 7	; 21
  94:	04 c0       	rjmp	.+8      	; 0x9e <LCD_busy+0x12>
	{
		LCD_peekapoo();
  96:	0e 94 41 00 	call	0x82	; 0x82 <LCD_peekapoo>
void LCD_busy(void)
{
	LCDDataDir = 0; 
	LCDControl |= (1<<READWRITE);
	LCDControl &= ~(1<<RegisterSelect); 
	while (LCDData >= 0x80)
  9a:	af 99       	sbic	0x15, 7	; 21
  9c:	fc cf       	rjmp	.-8      	; 0x96 <LCD_busy+0xa>
	{
		LCD_peekapoo();
	}
	
	LCDDataDir = 0xFF; 
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 bb       	out	0x14, r24	; 20
  a2:	08 95       	ret

000000a4 <LCD_command>:
		asm volatile("nop");
		LCDControl &= ~(1<<ENABLE);

}
void LCD_command(unsigned char command)
{
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	 LCD_busy();
  a8:	0e 94 46 00 	call	0x8c	; 0x8c <LCD_busy>
	LCDData = command ;
  ac:	c5 bb       	out	0x15, r28	; 21
	LCDControl &= ~(1<<READWRITE | 1<<RegisterSelect);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8b 77       	andi	r24, 0x7B	; 123
  b2:	82 bb       	out	0x12, r24	; 18
	LCD_peekapoo();
  b4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_peekapoo>
	LCDData = 0; 
  b8:	15 ba       	out	0x15, r1	; 21
}
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <LCd_send_char>:
void LCd_send_char(unsigned char character)
{
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	 LCD_busy();
  c2:	0e 94 46 00 	call	0x8c	; 0x8c <LCD_busy>
	LCDData = character ;
  c6:	c5 bb       	out	0x15, r28	; 21
	LCDControl &= ~(1<<READWRITE );
  c8:	97 98       	cbi	0x12, 7	; 18
	LCDControl |= (1<<RegisterSelect);
  ca:	92 9a       	sbi	0x12, 2	; 18
	LCD_peekapoo();
  cc:	0e 94 41 00 	call	0x82	; 0x82 <LCD_peekapoo>
	LCDData = 0;
  d0:	15 ba       	out	0x15, r1	; 21
	
}
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <LCD_send_string>:
void LCD_send_string( char *text )
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
	while(*text > 0)
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <LCD_send_string+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
	{
		LCd_send_char(*text);
  e4:	0e 94 5f 00 	call	0xbe	; 0xbe <LCd_send_char>
	LCDData = 0;
	
}
void LCD_send_string( char *text )
{
	while(*text > 0)
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <LCD_send_string+0xe>
	{
		LCd_send_char(*text);
		*text++ ;
	}
	
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_goto_location>:

void LCD_goto_location(uint8_t x ,uint8_t y)
{
	LCD_command( 0x80 +ColumnsPositions[y] + x);
  f4:	e6 2f       	mov	r30, r22
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 58       	subi	r24, 0x80	; 128
  fe:	90 81       	ld	r25, Z
 100:	89 0f       	add	r24, r25
 102:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_command>
 106:	08 95       	ret

00000108 <main>:
void LCD_send_string( char *text );
void LCD_goto_location(uint8_t x ,uint8_t y);


int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	00 d0       	rcall	.+0      	; 0x10e <main+0x6>
 10e:	00 d0       	rcall	.+0      	; 0x110 <main+0x8>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	
	LCDControlDir |= (1<<ENABLE) | (1<<READWRITE) |(1<<RegisterSelect) ; 
 114:	81 b3       	in	r24, 0x11	; 17
 116:	84 6a       	ori	r24, 0xA4	; 164
 118:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	85 ea       	ldi	r24, 0xA5	; 165
 11c:	9e e0       	ldi	r25, 0x0E	; 14
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x16>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x1c>
 124:	00 00       	nop
	_delay_ms(15);
	
    LCD_command(0x01); // clear screen
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_command>
 12c:	83 ef       	ldi	r24, 0xF3	; 243
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x28>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x2e>
 136:	00 00       	nop
	_delay_ms(2);
	LCD_command(0x38) ;
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	90 e1       	ldi	r25, 0x10	; 16
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x38>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x3e>
	_delay_us(50);
	LCD_command(0b00001110);
 146:	8e e0       	ldi	r24, 0x0E	; 14
 148:	0e 94 52 00 	call	0xa4	; 0xa4 <LCD_command>
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x46>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x4c>
	
	char PositionString[4];

    while (1) 
    {	
		for  (int j = 0 ; j < 4  ; j++)
 154:	e1 2c       	mov	r14, r1
 156:	f1 2c       	mov	r15, r1
 158:	5a c0       	rjmp	.+180    	; 0x20e <main+0x106>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 15a:	4a e0       	ldi	r20, 0x0A	; 10
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	c8 01       	movw	r24, r16
 164:	0e 94 0a 01 	call	0x214	; 0x214 <__itoa_ncheck>
		{
			for (int i =0 ; i < 20 ; i++)
		{
			
			itoa(i,PositionString,10);
			LCD_goto_location(13,2);
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_goto_location>
			LCD_send_string("X= ");
 170:	84 e6       	ldi	r24, 0x64	; 100
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>
			LCD_send_string(PositionString);
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>
 180:	4a e0       	ldi	r20, 0x0A	; 10
 182:	be 01       	movw	r22, r28
 184:	6f 5f       	subi	r22, 0xFF	; 255
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	c7 01       	movw	r24, r14
 18a:	0e 94 0a 01 	call	0x214	; 0x214 <__itoa_ncheck>

			
			itoa(j,PositionString,10);
			LCD_goto_location(13,3);
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	8d e0       	ldi	r24, 0x0D	; 13
 192:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_goto_location>
			LCD_send_string("Y= ");
 196:	88 e6       	ldi	r24, 0x68	; 104
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>
			LCD_send_string(PositionString);
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>
			
			LCD_goto_location(i,j);
 1a6:	6e 2d       	mov	r22, r14
 1a8:	80 2f       	mov	r24, r16
 1aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_goto_location>
			LCD_send_string("x");
 1ae:	8c e6       	ldi	r24, 0x6C	; 108
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	8f e4       	ldi	r24, 0x4F	; 79
 1b8:	93 ec       	ldi	r25, 0xC3	; 195
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <main+0xb2>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0xb8>
 1c0:	00 00       	nop
			
			
			
			_delay_ms(200);
			
			LCD_goto_location(i,j);
 1c2:	6e 2d       	mov	r22, r14
 1c4:	80 2f       	mov	r24, r16
 1c6:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_goto_location>
			LCD_send_string(" ");
 1ca:	83 e7       	ldi	r24, 0x73	; 115
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>
			
			LCD_goto_location(13,2);
 1d2:	62 e0       	ldi	r22, 0x02	; 2
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_goto_location>
			LCD_send_string("      ");
 1da:	8e e6       	ldi	r24, 0x6E	; 110
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>
			
			LCD_goto_location(13,3);
 1e2:	63 e0       	ldi	r22, 0x03	; 3
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	0e 94 7a 00 	call	0xf4	; 0xf4 <LCD_goto_location>
			LCD_send_string("      ");
 1ea:	8e e6       	ldi	r24, 0x6E	; 110
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_send_string>

    while (1) 
    {	
		for  (int j = 0 ; j < 4  ; j++)
		{
			for (int i =0 ; i < 20 ; i++)
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
 1f6:	04 31       	cpi	r16, 0x14	; 20
 1f8:	11 05       	cpc	r17, r1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <main+0xf6>
 1fc:	ae cf       	rjmp	.-164    	; 0x15a <main+0x52>
	
	char PositionString[4];

    while (1) 
    {	
		for  (int j = 0 ; j < 4  ; j++)
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
 200:	e9 1a       	sub	r14, r25
 202:	f9 0a       	sbc	r15, r25
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	e8 16       	cp	r14, r24
 208:	f1 04       	cpc	r15, r1
 20a:	09 f4       	brne	.+2      	; 0x20e <main+0x106>
 20c:	a3 cf       	rjmp	.-186    	; 0x154 <main+0x4c>
void LCD_send_string( char *text );
void LCD_goto_location(uint8_t x ,uint8_t y);


int main(void)
{
 20e:	00 e0       	ldi	r16, 0x00	; 0
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	a3 cf       	rjmp	.-186    	; 0x15a <main+0x52>

00000214 <__itoa_ncheck>:
 214:	bb 27       	eor	r27, r27
 216:	4a 30       	cpi	r20, 0x0A	; 10
 218:	31 f4       	brne	.+12     	; 0x226 <__itoa_ncheck+0x12>
 21a:	99 23       	and	r25, r25
 21c:	22 f4       	brpl	.+8      	; 0x226 <__itoa_ncheck+0x12>
 21e:	bd e2       	ldi	r27, 0x2D	; 45
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	0c 94 16 01 	jmp	0x22c	; 0x22c <__utoa_common>

0000022a <__utoa_ncheck>:
 22a:	bb 27       	eor	r27, r27

0000022c <__utoa_common>:
 22c:	fb 01       	movw	r30, r22
 22e:	55 27       	eor	r21, r21
 230:	aa 27       	eor	r26, r26
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	aa 1f       	adc	r26, r26
 238:	a4 17       	cp	r26, r20
 23a:	10 f0       	brcs	.+4      	; 0x240 <__utoa_common+0x14>
 23c:	a4 1b       	sub	r26, r20
 23e:	83 95       	inc	r24
 240:	50 51       	subi	r21, 0x10	; 16
 242:	b9 f7       	brne	.-18     	; 0x232 <__utoa_common+0x6>
 244:	a0 5d       	subi	r26, 0xD0	; 208
 246:	aa 33       	cpi	r26, 0x3A	; 58
 248:	08 f0       	brcs	.+2      	; 0x24c <__utoa_common+0x20>
 24a:	a9 5d       	subi	r26, 0xD9	; 217
 24c:	a1 93       	st	Z+, r26
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	79 f7       	brne	.-34     	; 0x230 <__utoa_common+0x4>
 252:	b1 11       	cpse	r27, r1
 254:	b1 93       	st	Z+, r27
 256:	11 92       	st	Z+, r1
 258:	cb 01       	movw	r24, r22
 25a:	0c 94 2f 01 	jmp	0x25e	; 0x25e <strrev>

0000025e <strrev>:
 25e:	dc 01       	movw	r26, r24
 260:	fc 01       	movw	r30, r24
 262:	67 2f       	mov	r22, r23
 264:	71 91       	ld	r23, Z+
 266:	77 23       	and	r23, r23
 268:	e1 f7       	brne	.-8      	; 0x262 <strrev+0x4>
 26a:	32 97       	sbiw	r30, 0x02	; 2
 26c:	04 c0       	rjmp	.+8      	; 0x276 <strrev+0x18>
 26e:	7c 91       	ld	r23, X
 270:	6d 93       	st	X+, r22
 272:	70 83       	st	Z, r23
 274:	62 91       	ld	r22, -Z
 276:	ae 17       	cp	r26, r30
 278:	bf 07       	cpc	r27, r31
 27a:	c8 f3       	brcs	.-14     	; 0x26e <strrev+0x10>
 27c:	08 95       	ret

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
